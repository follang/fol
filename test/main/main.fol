//one two three
/*sdssdsd*/



use[] one: loc = { /bin/vendor_perl/GET }
//one two three
use[] two: loc = { /bin/vendor_perl/GET }
//one two three
~use[] (
    one: url = { url };
    two: url = { url };
)

/* var one = 5; */

~typ[set, get, nothing] (
    three: rec[] = {
        var one: int
        var two: str
        var two: str
        var[] (
                four: int
                six: int
            )
    }
    three2: rec[] = {
        var three: vec
        var four: flt
    }
)

con leting: int = 5;

fun[mut, three] one(two: int): int = { 
    -var[exp] (
        four: int[exp];
        four2, four3: arr[nor], int = <expression>
        four4 : str[nor] = <expression>;
    )
    lab athing: int;
    var intwrap = athing(5);
    -var[exp] (
        four, four3: arr[int, 2], int = {  };
        five: str[nor[]] = <expression>
    )
}


typ some(S: gen[three], t: int): rec[] = {
    var el: S;
    /* var num: t */
}

typ[][T: gen, A: gen] OP(type: T): enm = {
    lab None: non;
    lab Some: type
}

fun makeOption(): OP[int] = {
    result = OP::Some(5)
}

//function genercs
pro[][T: gen] max(a: T, b: rut[(a: int): T]): T = {
    return a | a > b | b
}


// type generics
+typ[][T: gen[][Sized, Display]] ID(val: T): rec[Display] = {
    +var node: val
}
imp[][T: gen[]] Self: ID[T] = {
    +fun[] init(node: T): self = {
        self{ loc = None, node = node }
        var temp: int;
    }
}

//types
typ[get, set][T: gen[]] array(val: T, num: int): rec = { 
    var container: arr[val, num];
    var temp: int;
    lab gone: non;
    +pro lasttwo(): val = { 
        result = container[-0] + container[-1]
    }
};
imp[][T: gen[]] Self: array[T, int] = {
    +pro firsttwo(): T = {
        var aval = ID[int]::init(5);
    } 
} 

/* def somepkg: blk = { */

/* } */

ali fiveint: array[int, 5];
ali fiveint: array[int, 5];
pro main(): int = {
    ~var arrayish: array[int[5], 5] = { container: {1, 2, 3, 4, 5 }; temp: 5; };
    var test = arrayish<C>.get(0)
    arrayish.set(0) = { 0, 1, 2, 3, 4 }

    var aval = ID[int]::init(5);
    var test: box[box[array[int, 5]]] = ar

    when{
        case( something ){  },
        case( snother case ){  }
    }

    var somevar: fiveint = {1, 2, 3, 4, 5}
    //funcall
    var somevar = fiveint{1, 2, 3, 4, 5}
}

//segements (used for modules, blocks, exernal and unsafe)
seg goes: mod = {  }

fun[itr] chars(sentence: str): opt[char] = {
    var i = 0;
    loop (i < .len(sentence)) {
        yeild Some(sentence.get(i))
        i ++
    }
}

pro get_chars(sting: str): itr[char] = {
    chars(string)
    loop(char in chars("strange")) {
        .echo(char)
    }
    loop( x in range(..100) | .filter(x in array) | .map(x * 2) ){
        .echo(x)
    }
}
