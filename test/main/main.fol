use[] one: loc = { /bin/vendor_perl/GET }
use[] two: loc = { /bin/vendor_perl/GET }
~use[] (
    one: url = <expression>;
    two: url = <expression>;
)

pro main(arg: int): int = {
    -var[exp] (
        four: int[exp], str;
        four2, four3: arr[nor], int = <expression>
        four4 : str[nor] = <expression>;
    )
}

~typ[set, get, nothing] (
    three: rec[] = { 
        var one: int,
        var two: str
    }
    three2: rec[] = {
        three: vec,
        four: flt
    }
)


fun[mut, three] one(two: int): int = { 
    -var[exp] (
        four: int[exp];
        four2, four3: arr[nor], int = <expression>
        four4 : str[nor] = <expression>;
    )
}


typ some(S: gen[three]; t: int): rec[] = {
    el: S;
    num: t;
}

rut[(one: int; two: flt): int]{ 
    ~var sum = <b>one + <b>two->(int); 
    result = <o>sum;
}

some[int, 5]{ 1, 2, 3, 4, 5 }

lab athing: int;
var intwrap = athing(5);

typ[][T: gen] OP(type: T): enm = {
    lab None;
    lab Some: type
}

fun makeOption(): OP[int] = {
    result = OP::Some(5)
}

when(makeOption()) { 
    is (OP::Some(a)){ a + 2 },
    is (OP::None){ 0 }
}

//function genercs
pro[][T: gen] max(a: T; b: rut[(a: int): T]): T = {
    return a | a > b | b
}


// type generics
+typ[][T: gen[][Sized, Display]] ID(val: T): rec[Display] = {
    +var loc: opt[point::Location]
    +var node: val
}
imp[][T: gen[]] Self: ID[T] = {
    +fun[] init(node: T): self = {
        self{ loc = None, node = node }
    }
}
var aval = ID[int]::init(5);
imp[][T: gen[][Sized, Display]] Sized: ID[T] = {} 

//types
typ[get, set][T: gen[]] array(val: T; num: int): rec = { 
    var container: arr[val, num];
    var temp: int;
    lab gone: non;
    +pro lasttwo(): val = { 
        result = container[-0] + container[-1]
    }
};
imp[][T: gen[]] Self: array[T, int] = {
    +pro firsttwo(): T {
        result = self.container[0] + self.container[1]
    } 
} 
~var arrayish: array[int[5], 5] = { container: {1, 2, 3, 4, 5 }; temp: 5; };
var test = arrayish<C>.get(0)
arrayish.set(0) = { 0, 1, 2, 3, 4 }

var test: box[box[array[int, 5]]] = ar

//funcall
ali fiveint: array[int, 5];
var somevar: fiveint = {1, 2, 3, 4, 5}
var somevar = fiveint{1, 2, 3, 4, 5}
