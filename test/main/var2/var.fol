~var[nor, ext, hid ] one = .23
-var[exp,imu,] two: str[exp,hid][] = <expression>
+var three: int = <expression>
-var[exp] (
    four: str[exp];
    four2, four3: arr[nor], int = <expression>;
    four4: str[nor[]] = <expression>
)
var five: rut[(x: int): int][opt sd s] = { <expression> }
~var[exp] six,six2, six3, six4: seq[][one two] = <expression>
var[] seven , seven2, seven3: vec[exp,imu], int
!var[] eight, eight2: bol[exp,imu] , rut[(x: int): int]
+var nine: axi;-var[] ten ,ten2 , ten3 :rec   ,   vec
var eleven = <expression>; +var twelve :int; var thirteen;
var t1, t2, t3, t4, t5, t6: int, str


typ one: rec = { <expression> };
typ two(T: gen; N: int): rec[] = { <expression> };
+typ[] (
    three: rec[] = { <expression> };
    three2(): rec[got] = { <expression> };
)
~typ[] four: rec = { <expression> };
~typ[] five: rec[] = { <expression> };
~typ[] six: rec[blue, yellow] = { <expression> };
~typ[] seven(T: gen[]; N: int): rec[blue, green] = { <expression> };

~ali[] one: arr[int, 5];
~ali[] two: int;
+ali[] int: int;

use[] one: url = <expression>;
~use[] two: loc = <expression>;
~use[] (
    three: std = <expression>;
    four: std = <expression>;
)

def '$'(a: any): mac = '.to_string(a)'
def '~var': alt = 'var[~]'
def 'str': def[] = 'str[new,mut,nor]'

fun one(): int = { <expression> }
fun one(two: int): int = { <expression> }
!fun[hid, exp, three] one(two: int): int = { <expression> }
~log[] one(two: int): int = { <expression> }
/* fun[obj] `!=`(one, two: int): bol = { <expression> } */
~pro[obj] one(two: int): int = { <expression> }
/* ~pro[obj] `$`(): str = { <expression> } *1/ */
~pro[] one(gon: gen[]; two: int): int = { <expression> }
fun[] add1(adder: rut[(x: int): int]; gol: int): int = { <expression> }
fun[] add2(adder: rut[(x: int[one]): int[two]]): int = { <expression> }
