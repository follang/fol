~var[nor,rac, exp, hid] one = <expression>;
~var[exp,imu] two: str[exp,imu] = <expression>;
+var three: int = <expression>;
~var[exp] (
    four: int[exp] ;
    five: int[nor] = <expression>;
)
~var[exp] six, six2, six3, six4: int[] = <expression>;
var[] seven, seven2, seven3: int[exp,imu], flt[imu, exp], str;
var[] eight;
var nine;
var ten = <expression>;


fun one(two: int): int = { <expression> }
~fun one(two: int): int = { <expression> }
~log[] one(two: int): int = { <expression> }
~fun[] '!='(one, two: int): bol = { <expression> }
~pro[] (obj)one(two: int): int = { <expression> }
~pro[] (obj)'$': str = { <expression> }
~pro[] one[T: gen](two: int): int = { <expression> }

typ user: rec = { <expression> };
~typ[] (
    one: rec[] = <expression>;
    two: rec[] = <expression>;
)
~typ[] user: rec = { <expression> };
~typ[] user: rec[] = { <expression> };
~typ[] user(blue): rec[] = { <expression> };
~typ[] user(T: gen, N: int)(blue): obj ;
~ali[] five: arr[int, 5];
~ali[] int: int;

use[] one: two = <expression>;
~use[] one: two = <expression>;
~use[] (
    one: two = <expression>;
    two: two = <expression>;
)

def '$'(a: any): mac = '.to_string($)'
def '~var': alt = 'var[~]'
def 'str': def[] = 'str[new,mut,nor]'


----------------------------------
let it be
let,
it,
be.
.yourself

