~var[nor, []rac] one = <expression>
-var[exp,imu] two: str[exp,hid] = <expression>
+var three: int = <expression>
~var[exp] (
    four: int[exp];
    four2, four10: arr[nor], int = <expression>
    four3 : str[nor] = <expression>;
)
var five: rut[(x: int): int] = { <expression> }
~var[exp] six,six2, six3, six4: seq[] = <expression>
var[] seven , seven2, seven3: vec[exp,imu], flt[imu, exp], int
!var[] eight, eight2: bol[exp,imu] , rut[(x: int): int]
var nine: axi;-var[] ten ,ten2 , ten3 :rec
var eleven = <expression>; +var gettit :int
var t1, t2, t3, t4, t5, t6: int, str


fun one(two: int): int = { <expression> }
fun one(two: int): int = { <expression> }
~log[] one(two: int): int = { <expression> }
fun[] '!='(one, two: int): bol = { <expression> }
~pro[] (obj)one(two: int): int = { <expression> }
~pro[] (obj)'$': str = { <expression> }
~pro[] one[T: gen](two: int): int = { <expression> }
fun[] add1(adder: rut[(x: int): int]): int = { <expression> }
fun[] add2(): rut[(x: int): int] = { <expression> }

typ user: rec = { <expression> };
~typ[] (
    one: rec[] = <expression>;
    two: rec[] = <expression>;
)
~typ[] user: rec = { <expression> };
~typ[] user: rec[] = { <expression> };
~typ[] user(blue): rec[] = { <expression> };
~typ[] user(T: gen, N: int)(blue): obj ;
~ali[] five: arr[int, 5];
~ali[] int: int;

use[] one: two = <expression>;
~use[] one: two = <expression>;
~use[] (
    one: two = <expression>;
    two: two = <expression>;
)

def '$'(a: any): mac = '.to_string($)'
def '~var': alt = 'var[~]'
def 'str': def[] = 'str[new,mut,nor]'
